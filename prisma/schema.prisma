generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "interactiveTransactions"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                   Int                   @id @default(autoincrement())
  name                 String                @db.VarChar(255)
  email                String                @unique @db.VarChar(255)
  profilePicUrl        String?
  githubUrl            String?
  linkedinUrl          String?
  personalSiteUrl      String?
  selfIntro            String?
  password             String                @db.VarChar(255) //Hashed
  administrator        Administrator[]
  adviser              Adviser[]
  mentor               Mentor[]
  student              Student[]
  submitterId          Int?
  submitted            Submission[]          @relation("from_user")
  received             Submission[]          @relation("to_user")
  announcements        Announcement[]
  announcementComments AnnouncementComment[]
  announcementReadLogs AnnouncementReadLog[]
  forumposts           ForumPost[]
  forumpostComments ForumComment[]
}

model Cohort {
  startDate     DateTime
  endDate       DateTime
  academicYear  Int            @id
  advisers      Adviser[]
  mentors       Mentor[]
  projects      Project[]
  students      Student[]
  deadlines     Deadline[]
  announcements Announcement[]
}

model Student {
  id         Int      @id @default(autoincrement())
  userId     Int
  projectId  Int?
  nusnetId   String?  @unique @db.VarChar(40)
  matricNo   String?  @unique @db.VarChar(40)
  cohortYear Int
  cohort     Cohort   @relation(fields: [cohortYear], references: [academicYear])
  project    Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, cohortYear])
}

model Adviser {
  id         Int       @id @default(autoincrement())
  userId     Int
  nusnetId   String?
  matricNo   String?
  cohortYear Int
  cohort     Cohort    @relation(fields: [cohortYear], references: [academicYear])
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects   Project[]

  @@unique([userId, cohortYear])
}

model Mentor {
  id         Int       @id @default(autoincrement())
  userId     Int
  cohortYear Int
  cohort     Cohort    @relation(fields: [cohortYear], references: [academicYear])
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects   Project[]

  @@unique([userId, cohortYear])
}

model Administrator {
  id        Int      @id @default(autoincrement())
  userId    Int
  startDate DateTime
  endDate   DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id          Int                  @id @default(autoincrement())
  name        String
  teamName    String
  adviserId   Int?
  mentorId    Int?
  achievement AchievementLevel
  cohortYear  Int
  adviser     Adviser?             @relation(fields: [adviserId], references: [id])
  cohort      Cohort               @relation(fields: [cohortYear], references: [academicYear])
  mentor      Mentor?              @relation(fields: [mentorId], references: [id])
  students    Student[]
  proposalPdf String?
  posterUrl   String?
  videoUrl    String?
  hasDropped  Boolean              @default(false)
  submitted   Submission[]         @relation(name: "from_project")
  received    Submission[]         @relation(name: "to_project")
  evaluator   EvaluationRelation[] @relation(name: "evaluator")
  evaluatee   EvaluationRelation[] @relation(name: "evaluatee")

  @@unique([teamName, cohortYear])
}

model Deadline {
  id                    Int                  @id @default(autoincrement())
  name                  String
  cohort                Cohort               @relation(fields: [cohortYear], references: [academicYear])
  cohortYear            Int
  createdOn             DateTime             @default(now())
  dueBy                 DateTime
  desc                  String?
  type                  DeadlineType
  updatedAt             DateTime             @updatedAt
  sections              Section[]
  submission            Submission[]
  evaluating            Deadline?            @relation(fields: [evaluatingMilestoneId], references: [id], name: "evaluation")
  evaluatingMilestoneId Int?                 @unique
  evaluatedBy           Deadline?            @relation(name: "evaluation")
  anonymousApplicants   AnonymousApplicant[]

  @@unique([name, cohortYear])
}

model Section {
  id            Int        @id @default(autoincrement())
  name          String
  desc          String?
  sectionNumber Int
  deadline      Deadline   @relation(fields: [deadlineId], references: [id], onDelete: Cascade)
  deadlineId    Int
  questions     Question[]

  @@unique([deadlineId, sectionNumber])
}

model Question {
  id             Int          @id @default(autoincrement())
  questionNumber Int
  question       String
  desc           String
  type           QuestionType
  isAnonymous    Boolean      @default(false)
  answers        Answer[]
  options        Option[] //for MCQ/Multi-select questions
  section        Section      @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  sectionId      Int
}

model Option {
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int
  option     String
  order      Int

  @@unique([questionId, order])
}

model EvaluationRelation {
  id            Int     @id @default(autoincrement())
  fromProject   Project @relation(fields: [fromProjectId], references: [id], name: "evaluator")
  fromProjectId Int
  toProject     Project @relation(fields: [toProjectId], references: [id], name: "evaluatee")
  toProjectId   Int

  @@unique([fromProjectId, toProjectId])
}

model Submission {
  id            Int          @id @default(autoincrement())
  deadline      Deadline     @relation(fields: [deadlineId], references: [id])
  answers       Answer[]
  isDraft       Boolean      @default(true)
  updatedAt     DateTime     @updatedAt
  fromUser      User?        @relation(fields: [fromUserId], references: [id], name: "from_user")
  toUser        User?        @relation(fields: [toUserId], references: [id], name: "to_user")
  fromProject   Project?     @relation(fields: [fromProjectId], references: [id], name: "from_project")
  toProject     Project?     @relation(fields: [toProjectId], references: [id], name: "to_project")
  fromUserId    Int?
  toUserId      Int?
  fromProjectId Int?
  toProjectId   Int?
  deadlineId    Int
  application   Application?

  @@unique([deadlineId, fromProjectId, toProjectId, toUserId])
  @@unique([deadlineId, fromUserId, toProjectId])
}

model Application {
  submission   Submission           @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  submissionId Int                  @unique
  teamName     String
  achievement  AchievementLevel
  status       ApplicationStatus    @default(Unprocessed)
  applicants   AnonymousApplicant[]
}

model AnonymousApplicant {
  name                    String
  email                   String
  matricNo                String
  nusnetId                String
  deadline                Deadline    @relation(fields: [deadlineId], references: [id])
  deadlineId              Int
  application             Application @relation(fields: [applicationSubmissionId], references: [submissionId], onDelete: Cascade)
  applicationSubmissionId Int

  @@id([deadlineId, matricNo])
  @@unique([deadlineId, nusnetId])
}

model Answer {
  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  question     Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId   Int
  answer       String
  submissionId Int

  @@id([submissionId, questionId, answer])
}

model Announcement {
  id                   Int                   @id @default(autoincrement())
  title                String
  content              String
  targetAudienceRole   TargetAudienceRole
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  author               User                  @relation(fields: [authorId], references: [id])
  authorId             Int
  cohort               Cohort                @relation(fields: [cohortYear], references: [academicYear])
  cohortYear           Int
  announcementComments AnnouncementComment[]
  announcementReadLogs AnnouncementReadLog[]
}

model AnnouncementComment {
  id              Int                   @id @default(autoincrement())
  content         String
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  deletedAt       DateTime?
  parentComment   AnnouncementComment?  @relation("NestedComments", fields: [parentCommentId], references: [id])
  parentCommentId Int?
  childComments   AnnouncementComment[] @relation("NestedComments")
  author          User                  @relation(fields: [authorId], references: [id])
  authorId        Int
  announcement    Announcement          @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  announcementId  Int
}

model AnnouncementReadLog {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  announcementId Int

  @@unique([userId, announcementId])
}

model ForumPost {
  id        Int           @id @default(autoincrement())
  createdAt DateTime      @default(now())
  userId    Int
  title     String
  body      String
  category  ForumCategory 
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  forumComments ForumComment[]
}

model ForumComment {
  id              Int            @id @default(autoincrement())
  content         String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  deletedAt       DateTime?
  parentCommentId Int?
  parentComment   ForumComment?  @relation("NestedPostComments", fields: [parentCommentId], references: [id])
  childComments   ForumComment[] @relation("NestedPostComments")
  userId          Int
  forumPostId     Int
  user            User           @relation(fields: [userId], references: [id])
  forumPost       ForumPost      @relation(fields: [forumPostId], references: [id], onDelete: Cascade)
}

enum TargetAudienceRole {
  Student
  Adviser
  Mentor
  All
}

enum DeadlineType {
  Milestone
  Evaluation
  Feedback
  Application
  Other
}

enum QuestionType {
  ShortAnswer
  Paragraph
  MultipleChoice
  Checkboxes
  Dropdown
  Url
  Date
  Time
  RichTextEditor
}

enum AchievementLevel {
  Vostok
  Gemini
  Apollo
  Artemis
}

enum ApplicationStatus {
  Unprocessed
  Approved
  Rejected
}

enum ForumCategory {
  MilestoneOne
  MilestoneTwo
  MilestoneThree
  General
  MentorMatching
  Others
}
